Auteur 1 (exercice 1 & 3) : Maxime LAURENT
Auteur 2 (exercice 2)     : Daria GARNIER

Vous devez répondre de manière courte aux questions suivantes.
Il n'est pas demandé de modifier le programme que vous avez écrit mais
simplement d'expliquer les modifications qu'il faudrait y apporter.

Il faut remplacer les « ... » par votre réponse en laissant les lignes
blanches avant et après.

--------------------------------------------------------------------------------
C1. Que se passe-t-il si dans Jeu_Devin_Exo2 l'utilisateur répond d'abord trop
grand puis toujours trop petit ?
--------------------------------------------------------------------------------

Réponse : L'ordinateur devinera 499. Soit n-1 avec n sa première tentative.
		

--------------------------------------------------------------------------------
C2. Est-on sûr que Jeu_Devin_Exo1 se termine ?  Quel argument peut-on donner ?
--------------------------------------------------------------------------------

Réponse : Non, par exemple si l'utilisateur donne toujours le même nombre alors que celui-ci n'est pas la réponse.


--------------------------------------------------------------------------------
C3. Est-on sûr que Jeu_Devin_Exo2 se termine ?  Quel argument peut-on donner ?
--------------------------------------------------------------------------------

Réponse : Oui car l'algorithme de dichotomie appliqué à un nombre fini de d'entiers fini par terminer. IL faudra au plus log2 ( 1000 ) essais.


--------------------------------------------------------------------------------
F1. Les noms Jeu_Devin_Exo1, Jeu_Devin_Exo2 et Jeu_Devin_Exo3 ne sont pas très
parlants.  Par quoi pourrait-on les remplacer ?
--------------------------------------------------------------------------------

Réponse : Jeu_Devin_Exo1 -> Jeu_Devin_Joueur_Devine
	  Jeu_Devin_Exo2 -> Jeu_Devin_Joueur_Fait_Deviner
	  Jeu_Devin_Exo3 -> Jeu_Devin_Principal
	


--------------------------------------------------------------------------------
E1. Quelles sont les modifications à apporter à votre programme pour chercher
des nombres compris entre 1 et 9999 ?
--------------------------------------------------------------------------------

Réponse : Au lieu de mettre Alea (1, 999) il suffit de mettre Alea(1, 9999).


--------------------------------------------------------------------------------
E2. Quelles sont les modifications à apporter pour que que l'utilisateur
puisse utiliser aussi les caractères <, > et = pour indiquer si le nombre
proposé est trop petit, trop grand ou le bon ?
--------------------------------------------------------------------------------

Réponse : Dans la conditionnelle qui traite les réponses du joueur on remplace :
		if reponse = 'p' then --> if reponse = 'p' or reponse = '<' then
		if reponse = 'g' then --> if reponse = 'g' or reponse = '>' then
		if reponse = 't' then --> if reponse = 't' or reponse = '=' then

--------------------------------------------------------------------------------
E3. On veut limiter le nombre de tentatives à 10.  Si le nombre n'a pas éténot 
trouvé avant, le joueur a perdu.  Comment prendre en compte cette évolution ?
--------------------------------------------------------------------------------

Réponse : Initialiser un booléen à False qui représente si l'on est à moins de 10 tentatives.
	Ce booléen passe à True si le nombre de tentatives est supérieur à 10.
	Rajouter not(booléen) comme condition à la boucle répéter.


--------------------------------------------------------------------------------
E4. La recherche dichotomique conduit à toujours proposer les mêmes nombres.
Comment faire pour donner l'impression que le programme joue comme un humain
tout en restant efficace ?
--------------------------------------------------------------------------------

Réponse : On garde la valeur optimale renvoyé par l'algorithme de dichotomie et on rajoute un nouveau tirage aléatoire (par exemple 5). Ce tirage aléatoire permet de se "décaler" de nombre optimal. 
Par exemple par le premier essais, si on choisit 5 comme alea et que le module aléatoire renvoie 4, l'ordianteur devinera 504 au lieu de 500. 


--------------------------------------------------------------------------------
E5. Actuellement, l'utilisateur doit attendre la fin d'un jeu pour quitter le
programme.  On veut qu'il puisse le faire dès qu'il saisit 0 quand on lui pose
une question. Le programme doit alors dire que l'utilisateur a abandonné la
partie.  Comment faire ?
--------------------------------------------------------------------------------

Réponse : Créer un booléen abandon := False.
	Rajouter abandon comme condition de sortie de boucle.
	A chaque fois que le joueur tente de deviner si il répond zéro : abandon := True
	A la fin du programme si abandon alors renvoyé "vous avez abandonné".


--------------------------------------------------------------------------------
E6. Quand le programme détecte que l'utilisateur a triché, comment faire pour
que le programme explique au joueur quand il a triché ?
--------------------------------------------------------------------------------

Réponse : Prenons le cas ou le joueur dis "trop grand" à la place de "trop petit".

	Supposons que le joueur ment à l'étape E lorsque l'ordinateur propose le nombre N.
	L'ordinateur va continuer son algorithme de dichotomie jusqu'à retombé sur N+1, à l'étape 
	suivante il obtiendra une absurdité.
	Il faut donc sauvegarder l'ensemble des propositions de l'ordinateur ( par exemple avec un tableau).
	Et lorsque l'on obtient une absurdité à l'étape suivant celle où N+1 a été proposer, il suffit de parcourir le tableau jusqu'à la case stockant N. Le numéro de la case stockant N correspond à l'étape où le joueur à triché. 


--------------------------------------------------------------------------------
